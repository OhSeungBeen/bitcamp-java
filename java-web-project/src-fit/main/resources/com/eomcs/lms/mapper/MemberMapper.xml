<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.eomcs.lms.dao.MemberDao">

  <resultMap type="member" id="memberMap">
    <id column="member_id" property="no" />
    <result column="email" property="email" />
    <result column="password" property="password" />
    <result column="name" property="name" />
    <result column="nickname" property="nickname" />
    <result column="birth" property="birth" />
    <result column="sms_check" property="smsCheck" />
    <result column="email_check" property="emailCheck" />
    <result column="phone_check" property="phoneCheck" />
    <result column="tel" property="tel" />
    <result column="registered_date" property="registeredDate" />
    <result column="rank" property="rank" />
    <result column="login_type_id" property="loginTypeNo" />
    <result column="photo" property="photo" />


  <association property="loginType" javaType="loginType">
    <id column="login_type_id" property="no" />
    <result column="type_name" property="typeName" />
 </association>
  </resultMap>

  <sql id="default-columns">
    member_id,
    name,
    email,
    registered_date,
    tel
  </sql>

  <select id="findAll" resultMap="memberMap" parameterType="map">
    select
    <include refid="default-columns" />
    from
    member
    <where>
      <if test="search != null">
        <bind name="pattern1" value="'%' + search + '%'" />
        name like #{pattern1}
        or email like #{pattern1}
        or tel like #{pattern1}
      </if>
    </where>
    order by
    registered_date desc
    <if test="#{size != null || rowNo != null}">
      limit #{rowNo}, #{size}
    </if>
  </select>



  <select id="findByNo" resultMap="memberMap" parameterType="int">
    select

    m.member_id,
    m.name,
    m.email,
    m.nickname,
    m.birth,
    m.sms_check,
    m.email_check,
    m.tel,
    m.registered_date,
    m.phone_check,
    m.rank,
    m.photo,
    l.type_name

    from member m, login_type l
    where
    m.login_type_id = l.login_type_id
    and m.member_id = #{value}

  </select>


  <select id="findByEmailPassword" resultMap="memberMap" parameterType="map">
    select
    <include refid="default-columns" />



    from
    member
    where
    email = #{email}
    and password = password(#{password})
  </select>

  <insert id="insert" parameterType="member">
    insert into member(
    login_type_id,
    email,
    password,
    name,
    nickname,
    birth,
    sms_check,
    email_check,
    tel,
    phone_check,
    rank)
    values(
    #{loginTypeNo},
    #{email},
    password(#{password}),
    #{name},
    #{nickname},
    #{birth},
    #{smsCheck},
    #{emailCheck},
    #{tel},
    #{phoneCheck},
    #{rank})
  </insert>

  <update id="update" parameterType="member">
    update member
    <set>
      <if test="name != null">name = #{name},</if>
      <if test="email != null">email = #{email},</if>
      <if test="password != null">password = password(#{password}),</if>
      <if test="nickname != null"> nickname = #{nickname},</if>
      <if test="birth != null"> birth = #{birth},</if>
      <if test="smsCheck != null">sms_check = #{smsCheck},</if>
      <if test="emailCheck != null">email_check = #{emailCheck},</if>
      <if test="tel != null">tel = #{tel},</if>
      <if test="rank != null">rank = #{rank},</if>
      <if test="phoneCheck != null">phone_check = #{phoneCheck},</if>
      <if test="photo != null">photo = #{photo}</if>
    </set>
    where
    member_id = #{no}
  </update>

  <delete id="delete" parameterType="int">
    delete from member
    where member_id = #{value}
  </delete>

  <select id="countAll" resultType="int" parameterType="string">
    select count(*)
    from member
    <where>
      <if test="_parameter != null">
        <bind name="pattern1" value="'%' + _parameter + '%'" />
        name like #{pattern1}
        or email like #{pattern1}
        or tel like #{pattern1}
      </if>
    </where>
  </select>
</mapper>










